#pragma once
class Scene
// Scene : 사전적인 의미로는 "장면"이란 뜻
// 저번에도 설명한 바 있지만 게임 프로그래밍에서는 "최소 하나의 게임 진행이 이뤄지는 공간"이라는 의미로 사용

// 앞으로는 우리는 DX에서 뭔가 화면을 하나 만들 때 이 Scene을 상속받은 클래스를 만들고
// 거기에 멤버 등을 만들고 초기화 및  업데이트를 하는 식으로 관리할 것
// 각각의 Scene이 게임의 특정 단계를 맡도록 설계 후,
// 필요에 따라 그 Scene을 교체해서 사용하여 게임을 진행시키는 식으로 만듦
{
protected:
	VertexShader* VS;
	PixelShader* PS;
	// DX에서 그래픽을 출력하기 위해 반드시 사용해야 하는 "셰이더"를 가져온 것
	// '그래픽 파이프라인'에서 설명할 내용이므로 간단히만 설명하자면,
	// 우리가 출력하고 싶은 도형의 데이터를 이 셰이더를 이용해 모니터에 출력이 가능한 형태로 가공시킬 것이며,
	// 위의 두 셰이더는 각각 "꼭지점(장점) 셰이더 단계"와 "픽셀 셰이더 단계"의 처리를 담당하는 셰이더들

public:
	virtual ~Scene() {};
	// 기본적으로 Scene들은 프로그램상에서 자식클래스 본인이 아니라 부모 클래스인 Scene으로서 관리함
	// 따라서 자식 클래스를 그 Scene에 등록해서 이용하는 게 태반인 본 프로그램에선
	// 자식 클래스의 소멸자가 어떤 자식 클래스인지 모르는 상태에서도 호출될 수 있도록 가상함수로 만들어야 함

	virtual void Update() = 0;
	// 프로그램이 실행되는 와중, 시간이 경과하면서 업데이트되어야 할 내용을 이 함수에서 처리

	virtual void Render() = 0;
	// 화면을 그릴 때 어떤 처리가 이뤄질지를 이 함수에서 전담하여 처리

	virtual void PostRender() = 0;
	// ImGui 포스트에 적어놓을 데이터를 결정하도록 하는 함수
	// = ImGui를 통한 디버그로 확인할 내용들을 적어놓는 구간
};