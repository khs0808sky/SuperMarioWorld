#pragma once
/*

1. 컴퓨터 그래픽스에서 공간을 표기하는 방법

3D 공간 그 자체를 한 번 생각해봅시다 : 
어떤 물체가 어느 위치에 있는지, 무엇을 기준으로 어떻게 판단하는가?

-> 어떻게든 하나의 기준 = 원점을 정의하고, 그 원점에서 X축/Y축/Z축의 방향을 정한 뒤에
각각의 축 방향으로 얼만큼 떨어져있는지로서 해당 물체가 어디에 있는지 인식함

이렇게 정의할 경우 필연적으로 발생하는 문제 = 그러면 원점은 어떻게 정의하는가?
-> 원점 자체를 정하는 건 각자 원하는 기준에 맞춰서 정하면 되니까 이거 자체는 그렇게 큰 문제는 아님

그러나, 원점을 정했다고 해서 위치를 곧바로 표기할 수 있는 것은 아님 :
원점에서 "어디가 앞인지"를 추가로 정해야 하기 때문
-> 원점에서 뻗어가는 3개의 차원축이 각각 어느 축인지를 정의하는 과정도 거쳐야 함
== "시점"의 방향을 정해야 함

여기까지 했으면 그나마 3D 공간에서 물체가 어디에 있다 까지는 정리할 수 있음
하지만, 3D 공간을 그래픽으로서 출력하겠다 = 하나의 화면에 출력되도록 2D로서 변환을 시키고자 한다
이 경우, 단순히 방향만 결정하는 게 아니라 그렇게 바라보는 시야의 어느 부분을 그림으로서 담을 것인지
그 범위를 지정해야 함

길을 가면서 정면의 거리를 바라볼 때,
실제 거리는 몇km~10km 이상의 거리 전체에 온갖 사물이 가득하지만
인간의 눈이라는 한게 상 그 모든 것을 또렷하게 볼 순 없음, 따라서 일정 거리 이내에 있는 것들만 보게 될 것
그래픽도 마찬가지로, 어느 부분부터 어느 부분까지를 볼 것인지 그 범위를 지정해줘야 함
위의 예시에선 거리만 이야기하긴 했지만, 우리가 바라보는 방향에서 상하좌우로 어느 범위까지 볼 것인지 역시 한도가 있으니
그래픽도(이하 동문)

따라서 컴퓨터 그래픽에서 뭔가를 출력할 때 거치는 과정은 다음과 같음 :
 * 사물들의 위치를 측정하기 위해, 기준점으로 삼을 원점을 지정
 * 원점을 통해 사물들의 위치를 측정
 * 원점을 통해 정의된 전체 3D 공간 중 어느 지점에서 어느 방향을 바라볼 것인지를 결정 #
 * 그렇게 바라보고 있는 범위를 어디부터 어디까지로 할 것인지를 설정                 #
 * 시점 기준으로 바라보고 있는 물건들이 어떻게 보이는지를 기록
 * 그렇게 기록된 데이터를 하나의 화면으로 출력할 수 있는 내용으로 변환
 * 이를 화면에 출력
 
이 중 위에서 # 표시를 한 2개 단계는 3D에선 자주 다루나 2D에서는 그렇게 많이 다루진 않으므로 중요도가 비교적 낮음

위 단계들 외에도 원근법/물체의 겹침 등등 시야에 따라 생각해야 하는 것이 매우 많기 때문에
각 오브젝트들의 위치 데이터만 가지고는 곧바로 화면에 처리를 할 수가 없음

이를 위해 데이터상으로 존재하는 오브젝트들의 정보를
최종적으로 출력할 수 있는 데이터로 바꾸는 과정에 필요한 변환 작업을 WVP 변환이라 하며,
그 WVP 변환을 하기 위해 가팅 다뤄야 하는 개념이 SRT 변환 행렬

2. SRT 변환 행렬
변환 행렬 : 어떤 위치 벡터가 주어졌을 때, 그 위치 벡터의 크기, 회전, 위치 등을 변환시키는 행렬
-> 주어진 위치 벡터를 우리가 원하는 형태로 변환시키기 위해 우리가 계산으로 구해야 할 행렬들

===================================================================================
설명하기 전, 앞으로 관련 내용들을 제대로 이해하기 위해선
다음 개념들을 반드시 익혀둬야 함

-> 

행렬의 곱셈
단위행렬/역행렬 <- 간략하게나마 설명할 예정
(수학적 의미의)벡터
-> 벡터의 내적과 외적을 알아둬야 관련 수식들을 이해할 수 있음
삼각함수(행렬 관련은 아니나 그래픽 = 기하학에서의 각종 수식을 이용할 때 굉장히 많이 쓰임)

이 개념들은 가능한 최대로 따로 미리 공부해둬야만
추후 내용을 이해하는 기초로 가능할 것
===================================================================================

어떤 오브젝트의 3차원 공간에서의 위치를 따질 때, 다음과 같은 방식으로 표기
(x, y, z)
이는 X축으로 x만큼, Y축으로 y만큼, Z축으로 z만큼 원점에서 멀어져있다는 뜻
-> 원점(0, 0, 0)에서 X/Y/Z축 각 방향으로 x/y/z만큼 뻗어나간 벡터라고 말할 수 있음

-> 이 벡터에 행렬을 곱해 그 값을 변환시킨다면
해당 벡터 = 해당 좌표가 전체 좌표계에서 위치하는 지점까지 변경된다는 의미

따라서 3D 공간에 위치한 오브젝트의 좌표를 바꾸고 싶다면
그 오브젝트들을 표시하는 데 사용된 벡터의 값에 적절한 행렬을 곱해서 벡터의 값을 변환시켜야 함
<- 이 때 사용되는 행렬이 변환 행렬

3D 그래픽스 기준으로 변환 행렬은 총 3개가 존재
 * Scale(크기)
 * Rotation(회전)
 * Translation(위치/이동)
이 3가지 행렬을 통틀어 SRT 변환 행렬이라 부르며,
이 SRT 변환 행렬을 구해야 오브젝트의 위치를 행렬로서 표현할 수 있음

왜 굳이 행렬로서 표현해야 하냐면, 이렇게 구해진 행렬에 후술할 WVP 행렬에 사용되는 변환 행렬을 마저 곱하는 식으로
각 오브젝트의 위치/크기/회전 등을 우리가 출력할 화면의 좌표계로서 등록해 실제 그래픽에 출력되는 데이터로 변환시키는데
처음부터 그 행렬에 맞게 규격을 맞추는 게 다른 방식으로 했다가 다시 변환하는 것보다 훨씬 쉽기 때문

SRT 변환에 대해선 나중에 Transform을 구축할 때 설명

3. WVP 변환
- 우리는 이 WVP 변환이란 개념을 100% 배우진 않을 것
- 3D 공간을 이용하는 어지간한 엔진은 전부 사용하는 개념이라 중요하긴 하나,
- 전반적으로 수학 관련 설명이 너무 많이 들어감
- 수학 관련 내용을 전부 설명하긴 힘들기 떄문에, 가능한 최소한만큼만 설명할 예정

WVP 변환이라는 개념은 3D 공간을 다룰 때 (어느 엔진에서건) 기본적으로 사용하는 개념
DX에서 공간을 표현할 떄 거치는 단계에서 몇몇 설명했었던 내용을 좀 더 정리한 것
여기선 그 각각에 대해 좀 더 상세하게 설명

A. World 변환
3D/2D 공간에서 오브젝트가 어디에 위치해있는지 정의하기 위해선
위치의 기준점이 될 원점을 정해야 할 필요가 있음

3D 그래픽의 이론에서 이 World라는 개념은 다음과 같은 의미 :
각 오브젝트의 절대좌표
-> 실제 공간에서 정확히 어느 위치에 존재하는지를 이 world에 저장함

문제는 그 공간이라는 것 자체가 어디를 기준점으로 하는지 명확히 정의되지 않음
-> 한 물체의 위치가 어디에 존재하는가를 명확히 명시하려면
그 떄마다 어디를 기준점으로 할 것인지를 명시해줘야 함
-> 3D 공간에서 위치를 표현하려면 반드시 그 물체가 어느 지점을 원점으로 하고 있는 World에 해당되는지
알릴 필요가 있다

같은 물체라 하더라도 어느 좌표(=World)를 기준으로 하는지에 따라 좌표는 달라질 수 밖에 없으므로
오브젝트의 위치에 기준점으로 사용할 World를 적용(행렬의 곱셈)하여 실제 전체 공간에선
어디에 있는지를 표기할 수 있도록 변환을 해줘야 함
그게 World 변환

ㄱ - 기준점이 될 전체 공간의 World를 확보
ㄴ - 오브젝트의 SRT 행렬을 구함
ㄷ - 오브젝트의 SRT 행렬에 World를 곱하여 전체 실제 공간의 어디에 위치해있는지를 확인
    그 동시에 어떻게 위치해있는지(어떻게 생겼는지) 역시 확인

이 World 행렬을 반드시 익혀둬야 하는 이유 :
우리가 오브젝트의 위치를 관리할 때 전체 공간만을 기준으로 하지 않는 경우가 훨씬 많기 때문
-> 각 오브젝트는 전체 공간을 기준으로 배치될 수도 있겠지만
다른 오브젝트의 위치에 종속되어 종속된 오브젝트의 위치를 항상 따라가는 경우 역시 많다

ex1| 강사가 왼손에 리모컨을 하나 들고, 이를 원으로 회전시키고 있음
이를 강사의 머리를 기준점으로 놓고 리모컨의 좌표를 구하고자 한다면 특정한 점에서 일정 범위를 회전하고 있다는 등
복잡한 식으로 계산해야 하지만

손을 기준으로 놓고 보면 그냥 손에서 어느 정도 떨어진 거리의 원을 그리며 움직이고 있다는 식으로 아주 간단히 표현 가능
이런 식으로, 전체 공간의 원점을 기준으로 할 경우엔 좌표 처리가 복잡해지지만
그 전체공간 중의 특정한 좌표를 새로이 원점으로 집어서 계산할 경우엔 매우 간단해지는 일이 매우 많음

ex2| 우리가 사람을 프로그래밍으로 만들었다!
-> 그 사람의 팔이나 다리 같은 것들의 좌표를 지정해야 함

전체 공간의 좌표계만 사용할 경우
사람 팔/손가락/엄지뼈 등등을 일일이 지정해주고 움직일 때도 하나하나 움직여야 하는데

사람의 심장을 원점으로 하는 World를 이용할 경우
사람이 움직일 때 위에서 이야기했던 부위들을 우리가 직접 좌표 지정해줄 일 없이
사람 심장이 움직이는 대로 따라 움직이도록 만들기가 훨씬 수월해짐
-> 사람 좌표 하나만 가지고 사람의 사지가 움직이는 것을 구현할 수 있음

한 줄로 정리하면
"공간 그 자체를 정의, 어느 공간에 위치하는지를 표시하는 역할"

B. View(시점, 카메라) 변환
World 변환을 통해서 공간 어디에 위치하는지는 해결했음
그 공간을 화면에 담으려면 적어도 "전체 공간의 어느 부분을 보고 있다"고 명시해야 함

그러면 결국 화면을 찍을 카메라가 필요함
-> 카메라로 사진을 찍으려면 그 카메라가 볼 수 있는 곳에 오브젝트들이 있어야 할 것
따라서, 물체들을 카메라가 위치한 공간에서 바라보는 것처럼 보이게,
각 오브젝트들의 좌표를 카메라의 위치에 맞게 변환(회전)해주는 작업인 View 변환이 필요

View 변환은 크게 2가지 방법이 있음 :
- Roll/Pitch/Yaw라는 3가지 축을 이용해 만들어지는 각 회전행렬을 곱하는 방식
- 카메라의 위치 자체를 벡터라 구한 뒤, 이 벡터의 회전축을 구해 각 오브젝트에 적용하는 방식

3D 반에서는 2개 방법을 전부 배우지만,
2D 반에서는 위쪽, 그마저도 Yaw 딱 하나만을 이용해서 그리므로 직접 깊게 다룰 예정은 없다

C. Projection(투영) 변환

각 오브젝트들의 위치, 회전 등을 시점에 맞게 변환시켜줬으면
이제 각 오브젝트들은 카메라의 위치에 따라서 원근법에 맞게 커지거나 작아져야 함

실제론 각각 고유의 값을 가지고 있는 오브젝트들의 실제 크기지만,
시점에 따라선 이게 크게 보일 수도 있고 작게 보일 수도 있음

이런 것을 거리 등에 따라 실제 화면에 얼만큼 크게 그릴 것인지를 결정해야 하는데
이를 투영 행렬을 만들어 곱해주는 식으로 정리함
카메라에서 일정 거리 떨어진 만큼을 기준으로 그보다 가까우면 더 크게, 멀면 더 작게 그리는 식

화면의 비율 같은 것 역시 이 단계에서 맟추며,
화면 좌표계를 다른 걸 사용하고 있었다면 이 단계에서 교정하기도 함

DX에서 화면을 그릴 때 비율만으로 그리면 정다면체가 제대로 나오지 않고
화면 비율에 따라 일그러진 형태로 그려져서, 원하는 비율로 그리려면
그에 맞게 보정값을 줘야 했었음
투영 변환을 거치게 되면 더 이상 그런 변환을 거칠 필요 없이
입력되는 값 자체가 화면 비율에 맞는 값으로 알아서 리사이징 처리가 됨


이 각각에 대한 모든 내용은 각 부분을 실제로 구현홰보면서 진행할 예정
+ 지금 설명한 내용은 최소한도의 설명만 한 것이기 때문에,
조금이라도 그래픽 프로그래밍에 관심이 있다면
WVP 변환이라 검색하여 나오는 내용들을 추가로 공부해볼 것을 권장
*/