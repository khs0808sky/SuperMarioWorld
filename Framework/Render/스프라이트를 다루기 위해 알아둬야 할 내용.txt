
여기서 설명하는 것은 크게 3개 :
1) 애니메이션을 만들기 위해 필요한 스프라이트를 구하는 방법 중 하나

2) 스프라이트의 배경색을 제거하는 방법
(=이미지 파일을 편집하는 방법)

3) 그렇게 구한 스프라이트를 쉽게 사용할 수 있도록
해당 스프라이트 "맵"의 데이터를 편하게 딸 수 있는 사이트의 소개 및 이에 대한 설명


0) 일단 애니메이션이란 것이 무엇인지부터 설명

애니메이션(동화, 動畵) : 한 장만으로는 움직이지 않는 그림을,
비슷하게 그려진 여러 장을 눈으로 분간하기 힘들 정도로 빠른 속도로 교체하며 보여주면서
우리 눈에는 움직이는 것처럼 보이게 만든 연속적인 그림
-> 움직임을 화면에 자연스럽게 출력하기 위해선,
움직임이 연결되는 그림 수십장을 매우 빠른 속도로 화면에 순차적으로 교체하면서 보여주는 것

2D 그래픽을 이용한 게임에서 이런 애니메이션을 구현하는 방법은 크게 2가지
A) 사실상 3D나 마찬가지인 환경에서 오브젝트 등을 만들고 이를 움직인 뒤,
이를 2D(=한 화면)으로만 보여주는 것으로 실질적인 2D로 만드는 것
이 경우는 2D 전용으로 모델 등을 만들지 않았어도 2D인 것처럼 가능은 함

다만 어디까지나 3D를 기반으로 만들고 2D처럼 쓰는 것 뿐이기 때문에
실제로 적용되는 이론 및 수식 등은 2D가 아닌 3D에 맞춰서 구성해야 함 - 이 반에선 사용이 불가

B) 하나의 움직임을 표현하는 여러 스프라이트들을 순차적으로 빠른 속도로 바꿔서 보여주도록,
그 여러 스프라이트들을 화면에 빠른 속도로 출력하는 교체하는 것 <- 이를 우리가 이번에 다룸

그 하나하나의 움직임을 표현하기 위해, 
움직임 하나하나를 담당하는 스프라이트들이 이미 만들어진 맵을 구해오라 한 것

그렇게 만들어온 스프라이트들을 현재 이 프로젝트에서 구축할 프레임워크를 기준으로 설명하자면

ㄱ) 구해온 파일 하나하나를 Texture에 저장
ㄴ) 그 파일 하나에 있는 스프라이트 각각을 Frame 클래스의 객체로서 만들어둠
ㄷ) 그렇게 만들어진 프레임들을 Clip 클래스에 등록해 하나의 연속된 애니매이션을 구축
ㄹ) 구축된 Clip을 우리가 만든 오브젝트에서 출력하는 것으로 애니메이션을 구현

1) 애니메이션을 그리기 위해선, 그 애니메이션을 구성할 스프라이트들을 모아둔 자료를 필요로 함
그 중에서도 하나의 파일에 여러 스프라이트들을 모아서, 파일관리를 쉽게 할 수 있도록 하는 이미지파일이 있음
이를 "스프라이트 맵"이라고 함

제일 완벽하게 할 수 있는 건 스프라이트를 직접 제작하는 것
직접 도트를 찍거나 일러스트를 만들어서 이를 정리해둔다거나 하는 식
-> 그러나 이는 프로그래머가 담당해야 할 파트가 아니라 아트팀이 담당해야 할 파트이므로,
우리가 반드시 이 능력을 기를 필요는 없음
따라서 실제로는 이런 스프라이트 맵 등을 받아오는 경우가 태반
그렇기에, 직접 만든 게 아닌 받아온 데이터를 사용할 수 있는 능력을 길러두는 것이 더 중요

https://www.spriters-resource.com/
위 사이트는 기존의 게임에 있던 스프라이트들을 추출, 혹은 비슷하게 제작하여 올리는 사이트
저작권에서 자유롭지 않으므로 여기서 구한 스프라이트를 상업용으로 이용할 생각은 하지 않는 게 좋음	

여튼, 위 사이트에서 기존 게임에 사용되었던 스프라이트 등이 정리되어 있는 맵을 구할 수 있으므로
직접 제작하는 것보다는 위에서 적당한 것을 찾아서 이용하는 것을 추천

물론 이 사이트 외에도 다른 사이트, 혹은 개인 블로그 등에서 수제 제작된 스프라이트를 찾아 쓸 수도 있음
여튼 그렇게 스프라이트 맵을 구하는 것


2) 스프라이트의 배경색을 제거하는 방법
: 배경에 해당하는 부분의 Alpha값을 0으로 만드는 것
문제는 이걸 어떻게 조정하느냐?인데

이를 위해 우리는 무료 이미지 편집툴을 이용해볼 것
https://pixlr.com

위 사이트에 들어가 Pixlr Editor에 들어가
-> 이미지를 해당 사이트에 로드
-> 왼쪽에 있는 마술봉으로 선택 버튼을 누른 뒤 이미지의 배경을 클릭하면
이 사이트에서 알아서 그 배경부분을 전체 선택을 해줌
-> 그 배경을 Delete로 삭제하면 해당 부분의 값이 R,G,B,A값 각각 0,0,0,0이 됨
-> 그렇게 배경의 알파값이 제거된 이미지를 원하는 위치에 저장
(위 사이트는 기본적으로 무료지만 결제 없이는 하루 3회까지만 저장 가능)

3) 스프라이트 맵 하나에는 굉장히 많은 스프라이트가 있지만,
당연하지만 하나의 움직임을 구현할 때 그 모든 스프라이트를 전부 쓰지는 않음

그래서 하나의 움직임을 다루는 스프라이트만을 추출할 때 사용하는 방법은 크게 2가지
 * 스프라이트들을 말 그대로 하나하나씩 다른 파일로 잘라서 사용하는 방법
	* 원하는 움직임을 담당하는 이름으로서 Run1,Run2,Run3 같은 식으로 저장해두면
	  애니메이션을 구현할 때마다 해당 파일들을 순차적으로 부르기만 하면 끝
	* 다르게 말하면 애니메이션을 구현하기 위해 파일 하나하나를 불러와야 한다는 이야기이므로
	  파일을 담당하는 인스턴스를 필연적으로 많이 쓸 수 밖에 없음
	* 무엇보다, 수백종 이상이 존재하는 스프라이트를 이용하는 경우는 파일을 관리하는 난이도가 매우 높아짐
	  이는 스프라이트 맵에서 그 많은 스프라이트들을 분리하는 작업을 포함함

 * 스프라이트 맵 안에 있는 각 스프라이트들의 영역 및 좌표를 직접 이용해서 
   전체 파일 중 그 일부만 사용하도록 코드를 작성하는 방식
    * 사용하는 파일의 개수를 극단적으로 줄일 수 있음(400종류 즈음의 스프라이트를 단 하나의 파일에서 관리) 
	* (정리가 잘 된 스프라이트 맵에 한해)각 스프라이트를 더 쉽고 빠르게 이용할 수 있음
	* 하나의 파일에서 위치 등을 파악해 각 스프라이트를 이용해야 하므로
	  그 스프라이트 각각의 위치 등을 파악할 다른 방법이 필요

그러면 그 스프라이트 맵에서 각 스프라이트의 좌표 등을 어떻게 추출하는가?

> http://www.spritecow.com/
위 무료 사이트를 이용하면 각각의 스프라이트가 어느 좌표에 있는지 등은 체크할 수 있음
이미지를 등록한 후, Pick Background 클릭 후 스프라이트의 배경색을 선택한 뒤
원하는 스프라이트를 클릭하는 것으로 알아서 스프라이트의 위치 등을 확인할 수 있음

이를 통해 스프라이트 맵에서 스프라이트 하나만의 데이터를 구해,
이를 이용해서 애니메이션에 독립적인 스프라이트로서 구현할 수 있다