#pragma once
/*
0. DirectX(이하 DX)란 무엇인가?
- 간단히 말하면 그래픽 엔진이라 부를 수 있음
좀 더 엄밀히 말하면 API의 일종 = 그래픽을 이용하는 무언가를 만들기 위해 지원된 개발 환경

Microsoft가 직접 개발해 Windows 환경에서 동작하도록 만들어둔 API이기 때문에
Visual Studio를 통해 무언가를 만들기 매우 수월한 엔진

DX는 다른 방식으로 간단히 말하면
그래픽 파이프라인을 이용해 코드 상의 자료를 화면에 그래픽으로서 출력하도록 만드는 도구 모음


1. 그래픽 파이프라인
-> DX에서 그래픽을 화면(모니터)에 출력하기 위해 거치는 일련의 과정을 말함

파이프라인(Pipeline) : 프로그래밍에선 한 데이터를 처리하면 그 결과물을 출력하기 마련
그렇게 출력된 결과물을 곧바로 다음 단계의 처리과정에 입력해서 다시 데이터를 처리하고,
다시 나온 결과물을 또다시 다음 공정에 투입하는 식으로
정해진 여러 단계를 거쳐 원하는 결과를 도출해내는 과정을 말함

이를 그래픽을 그리는 과정을 통해 보자면

맨 처음 그림을 그리기 위해 작성한 자료
-> 자료 처리과정 1 -> 가공된 자료 A
-> 자료 처리과정 2 -> 가공된 자료 B
-> ...
-> ...
-> 마지막 자료 처리과정 -> 화면에 직접 출력할 수 있게 변형된 자료
-> 화면에 출력

라는 구조로 흘러가는 것


2. 그래픽 파이프라인의 각 단계

참고 주소:
https://learn.microsoft.com/ko-kr/windows/win32/direct3d11/overviews-direct3d-11-graphics-pipeline
위 주소의 사진만을 참고할 것
설명도 적혀있기는 하나, 비전공자가 이해할 수 있을 정도의 난이도로 설명하고 있지 않음

여기서는 위 주소에서 상세히 설명하고 있는 내용 중
우리가 직접적으로 다룰 단계에 대해서만 상세하게 다루고,
 나머지는 "이런 게 있다" 정도로만 언급할 예정
-> 2D 기준이며, 3D에서는 여기서 다루는 내용들을 전부 다루게 될 것이므로
언젠가는 다 익혀둬야 할 내용이 될 수 있음

또한, 지금 이 그래픽 파이프라인은 DirectX 11버젼 기준
같은 DX라도 버젼에 따라 그 단계가 다를 수 있으며,
다른 엔진을 사용할 경우엔 큰 흐름은 비슷할지라도 세세한 것은 전부 다를 수 있으므로
지금 설명하는 건 DX 말고 다른 데서는 그냥 큰 틀에서 이렇게 흘러간다는 정도로만 기억해둘 것


A) Input-Assembler 단계
입력 및 취합 단계 -> 자료를 입력하고 그 자료들을 취합하는 단계
= 우리가 코딩하는 단계
그래픽 구성에 이용할 자료들을 다음 단계로 넘기기 위해,
각 단계에서 사용할 수 있는 규격으로 자료들을 규합하는 과정

이 단계에서 그래픽 출력에 필요한 자료들을 입력하며, 그 과정은 전적으로 프로그래머에게 맡기고 있음
-> 추후 단계를 진행하기 위해, 데이터들을 앞으로의 단계에 사용할 수 있도록 자료의 형식을 구성해줘야 함
이것이 우리가 그래픽 파이프라인을 배워야 하는 이유
(다음 단계들에서 자료들이 어떻게 쓰이는 지 알아야 그에 맞는 자료구성을 할 수 있을 것이므로)

다음 단계들, 특히 Vertex Shader 등의 단계에서는
자료가 반드시 정해진 규격이여야만 정상적으로 작동하고
그 규격에서 벗어날 경우엔 아예 처리 자체가 진행되지 않음
그래서 입력할 자료의 구성을 반드시 우리가 규격에 맞춰줘야 할 필요가 있어서 명시적으로 만들어진 단계
-> 그냥 우리가 코딩하는 것을 하나의 단계로서 좀 거창하게 포장한 것

B) Vertex Shader(정점 셰이더) 단계
규격에 맞춰서 데이터를 입력했을 뿐,
입력된 데이터는 기본적으로 3D 공간에 있는 내용물을 입력한 것이므로
기본적으로 어느 픽셀에 어느 색이 출력되도록 할 것인지만을 출력할 수 있는 모니터(=2D 그래픽)에 즉각 출력할 수 없음
출력하기 위해선 2D 그래픽에 맞도록 이 데이터를 변환시켜줄 필요가 있음

-> 입력한 데이터는 그 자체로만 화면 처리에 그대로 사용할 수 없으니
이를 그래픽을 가공하는데 사용할 수 있는 형태, 그래픽 출력에 필요한 형태로 1차 가공하는 단계

3D 공간에선 그래픽, 즉 한 화면이라는 개념을 성립시키려면
그 3D 공간을 어느 한 점에서 보는시점이 하나 필요
ex) 우리가 사진을 찍고자 한다면, 그 사진을 찍을 카메라의 렌즈가
우리가 원하는 위치인 3차원 공간의 한 점에서 우리가 원하는 방향을 향하도록 하여
원하는 대상을 바라보도록 할 필요가 있음
그래야 하나의 "사진"이라는 2D 공간에 어떤 것이 그려져있을지 결정할 수 있기 때문

정점 셰이더는 바로 그런, 우리가 입력한 이런 3D 공간의 좌표계들을
"시점 기준의 좌표계"로 변환하는 역할을 맡음
-> 3D 좌표를 2D 좌표로 변환하는 역할을 한다

번외) 왠지 지금 3D를 기준으로 설명하는 느낌인데, 지금 우리가 배우는 건 2D가 아닌가?
-> 근래의 2D 게임은 3D 환경에서 만들고 이를 2D처럼 "연출"하는 게 더 싸게 먹히는 경우가 많음
정확히는 2D를 구현하는 기능이 거의 전부 3D로도 가능하기 때문에 굳이 2D 쪽만의 기능을 배울 이유가 없다
실제로 DX도 예전에는 2D만을 지원하는 Direct2D라는 기능을 따로 가지고 있었지만 지금은 거의 3D에 흡수되었음
따라서 우리가 2D를 다루기 위해 배우는 내용들은 상당수가 살짝만 손보면 3D 쪽에서도 사용 가능한 내용이 됨

C) Tesselator 단계
(DX11 기준으로는 이 단계에 Hull Shader/Tesselator/Domain Shader/Geometry Shader 등
여러 단계가 각각 따로 존재하나, 옛날 기준으로는 한 단계에 있던 것들이 분화된 것이며
어차피 우리는 이 단계의 내용을 뭉뚱그려서 처리할 것이기 때문에 큰 틀 하나로 줄인 것)

3D 그래픽은 그래픽을 구성하는 최소 단위가 "Polygon(폴리곤)"이라는 단위로 구성되어 있음
이 폴리곤의 수가 많으면 많을수록 최대한 세밀하게 그래픽을 표현할 수 있음
이 단계는 정점 셰이더를 통해서 1차 가공된 데이터를 잘게 쪼개서
최대한 많은 수의 폴리곤으로 만드는 단계
(2D 에서는 직접 손볼 일이 거의 없어서 우리는 자세하게 다루지 않음)
여기서 폴리곤을 쪼개는 단위는 픽셀 하나하나 단위에 근접할 수준으로 쪼개는 수준이라
우리가 미리미리 쪼개서 입력하는 등은 불가능에 가까움

D) Rasterizer(래스터라이저) 단계
2D 모니터와 3D 공간의 최대 차이점을 꼽으면, 3D 공간은 연속적인 무언가로 이뤄져있다고 볼 수 있음
(면, 세포, 구, 기타등등 점 하나가 아닌 연속되는 개념으로서 공간이 다뤄지고 있음)
반대로 2D 모니터는 모니터의 각 픽셀들을 구별해 픽셀 하나하나마다 무슨 색이 들어가있는지 지정하고,
그 색을 모니터에 출력하는 구조로 만들어져 있음
-> 3D 공간의 물체를 2D 모니터에 출력하려면,
어떻게든 그 물체가 3D 공간에서 위치하고 있는 연속적인 좌표들을 2D 모니터의 픽셀/도트로 변환시키는 작업이 필요
이를 행하는 = 위에서 폴리곤으로 갈갈이 찢어졌던 데이터를 픽셀 하나하나로 완전히 찢는(Raseteize) 단계

실제로 행하는 작업은
위의 여러 단계들을 통해 가공되었지만 여전히 폴리곤이라는 "도형"으로서 좌표를 다루고 있는 기존 데이터를
각 픽셀마다 대응시키는 식으로 위치를 지정해두고 "도트 단위"로 최소단위를 분해하는 단계

본격적으로 설정 하나하나를 다 뜯어볼 일은 없을 것이지만,
일부 설정을 바꾸는 일은 있을 것이기 때문에 그 때 약간 더 다룰 예정

E) Pixel Shader(픽셀 셰이더) 단계
래스터라이저 단계에서 픽셀 하나하나 단위로 쪼개어져 모니터의 각 픽셀에 일대일 대응이 가능해진 데이터를 받아,
그 픽셀 하나하나마다 어떤 색을 출력할 지 최종적으로 결정하는 단계
이 단계에서 결정된 색이 실제 모니터에 출력되는 것

이렇게 색을 결정할 때, 입력받은 데이터를 그대로 사용할 것인지
혹은 픽셀 위치 등에 따라 모자이크나 흑백이나 세피아톤 등으로 색을 바꾸는 것도 가능하기에
각종 색 필터 혹은 모자이크를 이 단계에서 구현하기도 함


Final) Output-Merger 단계
모니터에 출력할 내용이 픽셀 셰이더를 통해 전부 정해졌으면 이를 모니터에 출력하는 단계



이렇게 적어둔 단계 중 우리가 직접적으로 다룰 단계는
정점 셰이더와 픽셀 셰이더 2종이며,
국소적으로 다루는 것은 래스터라이저 단계


3. 다음 단계를 다루기 전에 반드시 설치해야 하는 것

Visual Studio의 도구 모음에서 확장 -> 확장관리 -> HLSL검색 -> HLSL for Visual Studio 다운로드(= 설치)
설치 후엔 VS 자체를 껐다가 켜서 적용시킬 것
이 HLSL이라는 것이 무엇인지는 VertexShader.hlsl 파일에서 설명

*/